---
# tasks file for docker-compose-gitlab
- debug: msg="Starting tasks from docker-compose-gitlab..."

# vars/main.yml is auto-imported.
- name: Import env-sensitive overrides
  include_vars: "vars/{{ service_env }}.yml"
  when: service_env != "dev"

# easy pre-reqs
- name: Ensure the docker and docker-compose python libs are installed.
  pip:
    name:
      - docker
      - docker-compose

- name: create paths for configs and data
  file:
    path: "{{ item }}"
    state: directory
    owner: "root"
    group: "root"
    mode: "0755"
  with_items:
    - '{{hostpath_gitlab_config}}'
    - '{{hostpath_gitlab_logs}}'
    - '{{hostpath_gitlab_data}}'
    - '{{hostpath_runner_config}}'


- name: write the ci runner config file
  copy:
    dest: "{{ hostpath_runner_config }}/config.toml"
    content: "{{ ci_runner_config }}"
    owner: "root"
    group: "root"
    mode: "0644"

# do the thing
- name: Launch services with docker-compose.yml
  docker_service:
    state: "{{ service_state }}" # defaults to "present", "absent" tears down svcs
    project_name: "{{ service_name }}_{{ service_env }}"
    definition:
      version: "2"
      services:
        gitlab:
          image: "gitlab/gitlab-ce:{{ image_tag_gitlab }}"
          restart: always
          hostname: "{{ hostname_gitlab }}"
          links:
            - gitlab_smtp
          environment:
            GITLAB_OMNIBUS_CONFIG: "{{ gitlab_omnibus_config }}"
          ports:
            - "{{ hostport_http }}:80"
            - "{{ hostport_https }}:443"
            - "{{ hostport_ssh }}:22"       # git interacts ssh by default, this is always a bit of a pain to deal with.
          volumes:
            - "{{ hostpath_gitlab_config }}:/etc/gitlab"
            - "{{ hostpath_gitlab_logs }}:/var/log/gitlab"
            - "{{ hostpath_gitlab_data }}:/var/opt/gitlab"
        gitlab_runner:
          image: "gitlab/gitlab-runner:{{ image_tag_runner }}"
          restart: always
          links:
            - gitlab
          environment:
            REGISTER_NON_INTERACTIVE: "true"
            CI_SERVER_URL: "http://gitlab"    # we link with the gitlab container, so that"s it"s name here
            REGISTRATION_TOKEN: "{{ ci_runner_registration_token }}"   # this comes from http://gitlab/admin/runners and
          volumes:
            - /usr/bin/docker:/usr/bin/docker             # so our scripts can call on docker to do things if we need them to
            - /var/run/docker.sock:/var/run/docker.sock   # this will allow the runner to spawn new docker-based runners
            - "{{ hostpath_runner_config }}:/etc/gitlab-runner"
            - /usr/share/zoneinfo:/usr/share/zoneinfo     # because gitlab doesn't include tzdata in their docker image...
        gitlab_smtp:
          image: "namshi/smtp"
          restart: always
          environment:
            RELAY_NETWORKS: ":172.0.0.0/8"
            MAILNAME: "{{ hostname_gitlab }}"
  register: output

- debug: var=output

# inline unit testing
- name: Confirm services launched successfully
  assert:
    that:
      - "gitlab.{{ service_name }}{{ service_env }}_gitlab_1.state.running"
      - "gitlab_runner.{{ service_name }}{{ service_env }}_gitlab_runner_1.state.running"
      - "gitlab_smtp.{{ service_name }}{{ service_env }}_gitlab_smtp_1.state.running"

- name: Run ci runner registration
  shell: |
    docker exec {{ service_name }}{{ service_env }}_gitlab_runner_1 \
    gitlab-runner register --non-interactive \
    {{ ci_runner_registration_options }}

# not using host storage for backups since S3 is configured
- name: Set up backup cron
  cron:
    name: 'gitlab backups'
    day: '{{ gitlab_backup_day }}'
    hour: '{{ gitlab_backup_hour }}'
    minute: '{{ gitlab_backup_minute }}'
    job: '/opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1'
  when: gitlab_backup_manage
